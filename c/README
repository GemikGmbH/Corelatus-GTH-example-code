Author: matthias@corelatus.se
$Id: README,v 1.13 2010-10-06 19:58:20 matthias Exp $
----------------------------------------------------------------------

This is example code in C for a Corelatus GTH. It is available under
a BSD licence. It includes:

  A complete parser for the XML a GTH emits. (see gth_client_xml_parse.h)

  A C API for some, but not all, GTH features. (see gth_apilib.h)

  Seven examples which use the C API: 
    - an SS7 sniffer
    - a CAS sniffer,
    - a timeslot recorder 
    - a timeslot playback program
    - a program to query and set attributes on GTH resources
    - a program to install software images on a GTH
    - a program to enable duplex (active) ISDN LAPD on a timeslot

As a convenience for windows users, the distribution at
www.corelatus.com/gth/api/gth_c_examples.zip includes pre-built .exe files.

How to build this code
----------------------

  * If you're using Microsoft Windows and Visual Studio, unpack the source
    and then:

       nmake /f NMakefile

    (we tested this using Visual Studio Express 2010, a free download
    from microsoft.com)

  * If you're using a unix-like operating system with a GCC toolchain,
    you should just be able to type 'make'. We tested with gcc 4.4.4 on linux.

  It's also possible to cross-compile from a Linux build system to a
  win32 target. That's not documented, though.

  If you get stuck building this code, feel free to mail matthias@corelatus.se

SS7 sniffer which saves to PCAP (wireshark) format files
--------------------------------------------------------

  Sniffs SS7 packets from a live E1 link and saves them
  to a 'pcap' file.

  Assumes you have a GTH connected to an SS7 link and a server
  connected to the GTH via IP (ethernet).

  Typical use:

    >./save_to_pcap 172.16.2.7 1A 2A 16 ss7.pcap
    capturing packets, press ^C to abort
    saving capture to file ss7.pcap.1

  you can then open the ss7.pcap.1 file in 'wireshark' (www.wireshark.org)

  If you don't have a live E1 link, you can use a GTH to replay
  previously recorded data, using 'playback_file'

  There's a WWW page which discusses this at 

     http://www.corelatus.com/gth/api/save_to_pcap/index.html
  

CAS line and register signalling sniffer
----------------------------------------

  Sniffs CAS R5 tones and line signalling from an E1 and
  prints them to standard output.

  Assumes you have a GTH module and a loopback cable connected
  from P1 to P2. Typical use:

   > ./monitor_cas 172.16.2.7
   setting up layer 1
   setting up layer 2
   waiting for GTH to connect to our signalling socket
   Waiting for tone detections

  And in another window:

   >./playback_file 172.16.2.7 1A 1 audio/mfc_fwd_3 
   wrote 800 octets to the <player>
   all done

Timeslot recorder
-----------------

  Record the (bit exact) contents of a timeslot to a file, optionally
  with a .wav header. Typical use:

   >./record 172.16.2.7 1A 1 recorded_file.wav

Timeslot playback
-----------------

  Plays back a previously recorded (or generated by some other means,
  for instance converting an audio file to a-law) timeslot on an
  E1. Typical use:

   >./playback_file 172.16.2.7 1A 1 audio/mfc_fwd_3 
   wrote 800 octets to the <player>
   all done

Software image installer
------------------------

  The software on the GTH can be upgraded with new releases 
  (typically with new features and bug fixes) from www.corelatus.com.

  The upgrade process works via the API. Typical use:

   >./install_release 172.16.1.10 /tmp/gth2_system_33c.gth
   Current system image version: gth2_system_32a
   Current failsafe image version: gth2_failsafe_9
   switching to failsafe
   waiting for the GTH to reboot
   GTH back up
   installing software image /tmp/gth2_system_33c.gth
   switching to system
   waiting for the GTH to reboot
   GTH back up
   Current system image version: gth2_system_33c

Query and set attributes on GTH resources
-----------------------------------------

   The GTH has many counters and indicators, called
   "attributes". These attributes are grouped into "resources". The
   attributes can be queried, for example:

   Find out the temperature (and more) on the GTH module:

      >./query_set 172.16.2.7 board
      architecture=gth2.1
      ROM ID=0x26d02d81000000e7
      temperature=33.4
      power consumption=7.4
      power source=A

   See a list of all the resources:

      >./query_set 172.16.1.10 inventory
      sync
      performance
      cpu
      board
      os
      system_image
      failsafe_image
      http_server
      eth1
      eth2
      pcm1A
      pcm1B
      pcm1C
      ...

   Some attributes can also be changed, for instance to enable
   an E1/T1 interface with default parameters:

      >./query_set 172.16.1.10 pcm1A status enabled
  
   The GTH API manual, http://www.corelatus.com/gth/api/ has a
   section explaining what all the attributes are for.

Start duplex LAPD on a timeslot
-------------------------------

   Start duplex LAPD signalling on a timeslot. This example
   program has hooks for inserting code to handle Q.931, i.e.
   set up calls.

   Typical use:

     >./duplex_lapd 172.16.1.10 1A 16

GTH API for C programs
----------------------

  gth_apilib.h provides an interface to the GTH for C programs.  This
  interface lets you set up communication to the GTH and then send
  commands to do everything which the above example programs do, and more.

  gth_apilib.h is not feature complete, i.e. not all GTH features are
  implemented. Extending gth_apilib.h to cover more GTH features is
  left as an exercise, either for the reader or, on request, by
  Corelatus.

  Typical use:

    #include "gth_apilib.h"

    GTH_api api;
    char buffer[MAX_JOB_ID];

    gth_connect(&api, "172.16.1.10");
    gth_new_player(&api, "3A", 16, buffer);

    ...

Parser for GTH XML
------------------

  gth_client_xml_parse.h provides a C interface to a parser which
  understands all possible responses from a GTH. 

  Normally, controlling the GTH through gth_apilib.h is preferable to
  using the parser directly.

Questions, comments? Send mail to Matt Lang (matthias@corelatus.se)
